<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | 阴影下的博客]]></title>
  <link href="http://loveshadow.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://loveshadow.github.io/"/>
  <updated>2016-01-23T13:07:17+08:00</updated>
  <id>http://loveshadow.github.io/</id>
  <author>
    <name><![CDATA[李曌]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DES和DESede加密学习]]></title>
    <link href="http://loveshadow.github.io/blog/2016/01/22/DES_he_DESede_jia_mi_xue_xi/"/>
    <updated>2016-01-22T14:40:58+08:00</updated>
    <id>http://loveshadow.github.io/blog/2016/01/22/DES_he_DESede_jia_mi_xue_xi</id>
    <content type="html"><![CDATA[<h3>DES和DESede算法了解以及在android中的使用</h3>

<h5>1. 算法介绍</h5>

<p>首先DES和DESede是对称加密，DESede是对DES算法改进的三重加密算法，不过处理速度也变得较慢，密钥计算时间较长</p>

<!--more-->


<h5>2. 在android中的应用</h5>

<h6>2.1 DES使用</h6>

<p>首先看一下使用代码
<figure class='code'><figcaption><span>java DES.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">KEY_ALGORITHM</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">DES</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//格式：加密(解密)算法/工作模式/填充模式</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">CIPHER_ALGORITHM</span> <span class="o">=</span> <span class="s">&quot;DES/ECB/PKCS5Padding&quot;</span><span class="o">;</span>
</span><span class='line'><span class="c1">//编码</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">desEncodeECB</span><span class="o">(</span><span class="n">String</span> <span class="n">_key</span><span class="o">,</span> <span class="n">String</span> <span class="n">_data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">byte</span><span class="o">[]</span> <span class="n">key</span> <span class="o">=</span> <span class="n">_key</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="n">encoding</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span> <span class="o">=</span> <span class="n">_data</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="n">encoding</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Key</span> <span class="n">desKey</span><span class="o">;</span>
</span><span class='line'>        <span class="n">DESKeySpec</span> <span class="n">dks</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DESKeySpec</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>        <span class="n">SecretKeyFactory</span> <span class="n">keyFactory</span> <span class="o">=</span> <span class="n">SecretKeyFactory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">KEY_ALGORITHM</span><span class="o">);</span>
</span><span class='line'>        <span class="n">desKey</span> <span class="o">=</span> <span class="n">keyFactory</span><span class="o">.</span><span class="na">generateSecret</span><span class="o">(</span><span class="n">dks</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Cipher</span> <span class="n">cipher</span> <span class="o">=</span> <span class="n">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">CIPHER_ALGORITHM</span><span class="o">);</span>
</span><span class='line'>        <span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">Cipher</span><span class="o">.</span><span class="na">ENCRYPT_MODE</span><span class="o">,</span> <span class="n">desKey</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cipher</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//解码</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">desDecodeECB</span><span class="o">(</span><span class="n">String</span> <span class="n">_key</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">byte</span><span class="o">[]</span> <span class="n">key</span> <span class="o">=</span> <span class="n">_key</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="n">encoding</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Key</span> <span class="n">desKey</span><span class="o">;</span>
</span><span class='line'>        <span class="n">DESKeySpec</span> <span class="n">spec</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DESKeySpec</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>        <span class="n">SecretKeyFactory</span> <span class="n">keyFactory</span> <span class="o">=</span> <span class="n">SecretKeyFactory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">KEY_ALGORITHM</span><span class="o">);</span>
</span><span class='line'>        <span class="n">desKey</span> <span class="o">=</span> <span class="n">keyFactory</span><span class="o">.</span><span class="na">generateSecret</span><span class="o">(</span><span class="n">spec</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Cipher</span> <span class="n">cipher</span> <span class="o">=</span> <span class="n">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">CIPHER_ALGORITHM</span><span class="o">);</span>
</span><span class='line'>        <span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">Cipher</span><span class="o">.</span><span class="na">DECRYPT_MODE</span><span class="o">,</span> <span class="n">desKey</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cipher</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>基本流程如下:</strong></p>

<p>① 实例化密钥规范</p>

<p>从源码中可以看到密钥的字节长度为 8
<figure class='code'><figcaption><span>java DESKeySpec.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">DES_KEY_LEN</span> <span class="o">=</span> <span class="mi">8</span><span class="o">;</span>  <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>
构造方法
<figure class='code'><figcaption><span>java DESKeySpec.java</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'>     <span class="o">*</span> <span class="n">key的长度不能</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="mi">8</span>
</span><span class='line'>     <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">DESKeySpec</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">key</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InvalidKeyException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @param offset 偏移位置</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">DESKeySpec</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span> <span class="n">offset</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InvalidKeyException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">(</span><span class="s">&quot;key == null&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">offset</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">DES_KEY_LEN</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">InvalidKeyException</span><span class="o">(</span><span class="s">&quot;key too short&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">key</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">DES_KEY_LEN</span><span class="o">];</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">offset</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">key</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">DES_KEY_LEN</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>
② 接着实例化密钥工厂</p>

<p><figure class='code'><figcaption><span>java SecretKeyFactory.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'>     <span class="o">*</span> <span class="nd">@param</span> <span class="n">algorithm</span> <span class="nf">算法名称</span><span class="o">(</span><span class="n">eg</span><span class="o">.</span> <span class="n">DES</span><span class="o">)</span>
</span><span class='line'>     <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">SecretKeyFactory</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">algorithm</span><span class="o">)</span>
</span><span class='line'>            <span class="kd">throws</span> <span class="n">NoSuchAlgorithmException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">algorithm</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">algorithm</span> <span class="o">==</span> <span class="kc">null</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">Engine</span><span class="o">.</span><span class="na">SpiAndProvider</span> <span class="n">sap</span> <span class="o">=</span> <span class="n">ENGINE</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">algorithm</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">SecretKeyFactory</span><span class="o">((</span><span class="n">SecretKeyFactorySpi</span><span class="o">)</span> <span class="n">sap</span><span class="o">.</span><span class="na">spi</span><span class="o">,</span> <span class="n">sap</span><span class="o">.</span><span class="na">provider</span><span class="o">,</span> <span class="n">algorithm</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @param keyFacSpi SPI委托</span>
</span><span class='line'><span class="cm"> * @param provider 密钥工厂的提供者</span>
</span><span class='line'><span class="cm"> * @param algorithm 算法名称</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">protected</span> <span class="nf">SecretKeyFactory</span><span class="o">(</span><span class="n">SecretKeyFactorySpi</span> <span class="n">keyFacSpi</span><span class="o">,</span>
</span><span class='line'>        <span class="n">Provider</span> <span class="n">provider</span><span class="o">,</span> <span class="n">String</span> <span class="n">algorithm</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">provider</span> <span class="o">=</span> <span class="n">provider</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">algorithm</span> <span class="o">=</span> <span class="n">algorithm</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">spiImpl</span> <span class="o">=</span> <span class="n">keyFacSpi</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>
可以明显的看到是<code>Engine.SpiAndProvider</code>是主角。
一些概念：
<code>Engine</code>顾名思义，是引擎的意思。其实就是一个一个功能的封装。
<code>SPI</code>全名：(<code>Service Provider Interface</code>)服务提供者接口。
这块涉及到<code>Java Security</code>的知识，这块我不做阐述(主要是自己也没看懂)，具体链接<a href="http://blog.csdn.net/innost/article/details/44081147" title="深入理解Android之Java Security">http://blog.csdn.net/innost/article/details/44081147</a></p>

<p>总之，这块会拿到一个密钥工厂对象</p>

<p>③ 根据密钥规范生成密钥</p>

<p>生成方法
<figure class='code'><figcaption><span>java SecretKeyFactory.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="n">SecretKey</span> <span class="nf">generateSecret</span><span class="o">(</span><span class="n">KeySpec</span> <span class="n">keySpec</span><span class="o">)</span>
</span><span class='line'>            <span class="kd">throws</span> <span class="n">InvalidKeySpecException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">spiImpl</span><span class="o">.</span><span class="na">engineGenerateSecret</span><span class="o">(</span><span class="n">keySpec</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
调用的是加密模块的方法</p>

<p>④ 获取加/解密类对象，并使用</p>

<p>不能实例化，获取对象
<figure class='code'><figcaption><span>java Cipher.java</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">doFinal</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">input</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IllegalBlockSizeException</span><span class="o">,</span>
</span><span class='line'>            <span class="n">BadPaddingException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mode</span> <span class="o">!=</span> <span class="n">ENCRYPT_MODE</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">mode</span> <span class="o">!=</span> <span class="n">DECRYPT_MODE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">spiImpl</span><span class="o">.</span><span class="na">engineDoFinal</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>到此为止，android中DES加/解密的使用就学习到这。</p>

<p><strong>DESede</strong>的使用方法和DES的一样，唯一不同的是密码规范<code>DESedeKeySpec</code>及算法名称<code>DESede</code>和DES的不同</p>
]]></content>
  </entry>
  
</feed>
